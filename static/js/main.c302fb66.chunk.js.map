{"version":3,"sources":["components/expense-form/expense-form.component.jsx","components/new-expense/new-expense.component.jsx","components/card/card.component.jsx","components/expense-date/expense-date.component.jsx","components/expense-item/expense-item.component.jsx","components/expenses-list/expenses-list.component.jsx","components/expenses-filter/expenses-filter.component.jsx","components/chart-bar/chart-bar.component.jsx","components/chart/chart.component.jsx","components/expense-chart/expense-chart.component.jsx","components/expenses/expenses.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["ExpenseForm","props","useState","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","onSubmit","event","preventDefault","expenseData","title","amount","date","Date","onSaveExpenseData","className","type","value","onChange","target","min","step","max","NewExpense","enteredExpenseData","id","Math","random","toString","onAddExpense","Card","children","ExpenseDate","month","toLocaleString","year","getFullYear","day","ExpenseItem","ExpensesList","expenses","length","map","expense","ExpensesFilter","selected","onChangeFilter","ChartBar","barFillHeight","maxValue","round","style","height","label","Chart","dataPointValues","dataPoints","dataPoint","totalMaximum","ExpensesChart","chartDataPoints","getMonth","Expenses","filteredYear","setFilteredYear","filteredExpenses","filter","selectedYear","INITIAL_EXPENSES","App","setExpenses","prevExpense","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c302fb66.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport \"./expense-form.styles.css\";\r\n\r\nconst ExpenseForm = (props) => {\r\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\r\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\r\n  const [enteredDate, setEnteredDate] = useState(\"\");\r\n\r\n  // const [userInput, setUserInput] = useState({\r\n  //   enteredTitle: \"\",\r\n  //   enteredAmount: \"\",\r\n  //   enteredDate: \"\",\r\n  // });\r\n\r\n  const titleChangeHandler = (event) => {\r\n    setEnteredTitle(event.target.value);\r\n\r\n    // setUserInput({\r\n    //   ...userInput,\r\n    //   enteredTitle: event.target.value,\r\n    // });\r\n\r\n    // setUserInput((prevState) => {\r\n    //   return { ...prevState, enteredTitle: event.target.value };\r\n    // });\r\n  };\r\n\r\n  const amountChangeHandler = (event) => {\r\n    setEnteredAmount(event.target.value);\r\n\r\n    // setUserInput({\r\n    //   ...userInput,\r\n    //   enteredAmount: event.target.value,\r\n    // });\r\n  };\r\n\r\n  const dateChangeHandler = (event) => {\r\n    setEnteredDate(event.target.value);\r\n\r\n    // setUserInput({\r\n    //   ...userInput,\r\n    //   enteredDate: event.target.value,\r\n    // });\r\n  };\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const expenseData = {\r\n      title: enteredTitle,\r\n      amount: +enteredAmount,\r\n      date: new Date(enteredDate),\r\n    };\r\n\r\n    props.onSaveExpenseData(expenseData);\r\n    setEnteredTitle(\"\");\r\n    setEnteredAmount(\"\");\r\n    setEnteredDate(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <div className=\"new-expense__controls\">\r\n        <div className=\"new-expense__control\">\r\n          <label>Title</label>\r\n          <input\r\n            type=\"text\"\r\n            value={enteredTitle}\r\n            onChange={titleChangeHandler}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"new-expense__control\">\r\n          <label>Amount</label>\r\n          <input\r\n            type=\"number\"\r\n            min=\"0.01\"\r\n            step=\"0.01\"\r\n            value={enteredAmount}\r\n            onChange={amountChangeHandler}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"new-expense__control\">\r\n          <label>Date</label>\r\n          <input\r\n            type=\"date\"\r\n            min=\"2020-01-01\"\r\n            max=\"2023-12-31\"\r\n            value={enteredDate}\r\n            onChange={dateChangeHandler}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"new-expense__actions\">\r\n        <button type=\"submit\">Add Expense</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ExpenseForm;\r\n","import React from \"react\";\r\n\r\nimport ExpenseForm from \"../expense-form/expense-form.component\";\r\n\r\nimport \"./new-expense.styles.css\";\r\n\r\nconst NewExpense = (props) => {\r\n  const onSaveExpenseDataHandler = (enteredExpenseData) => {\r\n    const expenseData = {\r\n      ...enteredExpenseData,\r\n      id: Math.random().toString(),\r\n    };\r\n\r\n    props.onAddExpense(expenseData);\r\n  };\r\n\r\n  return (\r\n    <div className=\"new-expense\">\r\n      <ExpenseForm onSaveExpenseData={onSaveExpenseDataHandler} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewExpense;\r\n","import React from \"react\";\r\n\r\nimport \"./card.styles.css\";\r\n\r\nconst Card = (props) => {\r\n  return <div className={`card ${props.className}`}>{props.children}</div>;\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\n\r\nimport \"./expense-date.styles.css\";\r\n\r\nconst ExpenseDate = (props) => {\r\n  const month = props.date.toLocaleString(\"en-US\", { month: \"long\" });\r\n  const year = props.date.getFullYear();\r\n  const day = props.date.toLocaleString(\"en-US\", { day: \"2-digit\" });\r\n\r\n  return (\r\n    <div className=\"expense-date\">\r\n      <div className=\"expense-date__month\">{month}</div>\r\n      <div className=\"expense-date__year\">{year}</div>\r\n      <div className=\"expense-date__day\">{day}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExpenseDate;\r\n","import React from \"react\";\r\n\r\nimport Card from \"../card/card.component\";\r\nimport ExpenseDate from \"../expense-date/expense-date.component\";\r\n\r\nimport \"./expense-item.styles.css\";\r\n\r\nconst ExpenseItem = (props) => {\r\n  return (\r\n    <li>\r\n      <Card className=\"expense-item\">\r\n        <ExpenseDate date={props.date} />\r\n        <div className=\"expense-item__description\">\r\n          <h2>{props.title}</h2>\r\n          <div className=\"expense-item__price\">${props.amount}</div>\r\n        </div>\r\n      </Card>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default ExpenseItem;\r\n","import React from \"react\";\r\n\r\nimport ExpenseItem from \"../expense-item/expense-item.component\";\r\n\r\nimport \"./expenses-list.styles.css\";\r\n\r\nconst ExpensesList = (props) => {\r\n  if (props.expenses.length === 0) {\r\n    return <h2 className=\"expenses-list__fallback\">Found no expenses.</h2>;\r\n  }\r\n\r\n  return (\r\n    <ul className=\"expenses-list\">\r\n      {props.expenses.map((expense) => (\r\n        <ExpenseItem\r\n          key={expense.id}\r\n          title={expense.title}\r\n          amount={expense.amount}\r\n          date={expense.date}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ExpensesList;\r\n","import React from \"react\";\r\n\r\nimport \"./expenses-filter.styles.css\";\r\n\r\nconst ExpensesFilter = (props) => {\r\n  const dropdownChangeHandler = (event) => {\r\n    props.onChangeFilter(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"expenses-filter\">\r\n      <div className=\"expenses-filter__control\">\r\n        <label>Filter by year</label>\r\n        <select value={props.selected} onChange={dropdownChangeHandler}>\r\n          <option value=\"2023\">2023</option>\r\n          <option value=\"2022\">2022</option>\r\n          <option value=\"2021\">2021</option>\r\n          <option value=\"2020\">2020</option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExpensesFilter;\r\n","import React from \"react\";\r\n\r\nimport \"./chart-bar.styles.css\";\r\n\r\nconst ChartBar = (props) => {\r\n  let barFillHeight = \"0%\";\r\n\r\n  if (props.maxValue > 0) {\r\n    barFillHeight = Math.round((props.value / props.maxValue) * 100) + \"%\";\r\n  }\r\n\r\n  return (\r\n    <div className=\"chart-bar\">\r\n      <div className=\"chart-bar__inner\">\r\n        <div\r\n          className=\"chart-bar__fill\"\r\n          style={{ height: barFillHeight }}\r\n        ></div>\r\n      </div>\r\n      <div className=\"chart-bar__label\">{props.label}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChartBar;\r\n","import React from \"react\";\r\n\r\nimport ChartBar from \"../chart-bar/chart-bar.component\";\r\nimport \"./chart.styles.css\";\r\n\r\nconst Chart = (props) => {\r\n  const dataPointValues = props.dataPoints.map((dataPoint) => dataPoint.value);\r\n  const totalMaximum = Math.max(...dataPointValues);\r\n\r\n  return (\r\n    <div className=\"chart\">\r\n      {props.dataPoints.map((dataPoint) => (\r\n        <ChartBar\r\n          key={dataPoint.label}\r\n          value={dataPoint.value}\r\n          maxValue={totalMaximum}\r\n          label={dataPoint.label}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React from \"react\";\r\n\r\nimport Chart from \"../chart/chart.component\";\r\n\r\nconst ExpensesChart = (props) => {\r\n  const chartDataPoints = [\r\n    { label: \"Jan\", value: 0 },\r\n    { label: \"Feb\", value: 0 },\r\n    { label: \"Mar\", value: 0 },\r\n    { label: \"Apr\", value: 0 },\r\n    { label: \"May\", value: 0 },\r\n    { label: \"Jun\", value: 0 },\r\n    { label: \"Jul\", value: 0 },\r\n    { label: \"Aug\", value: 0 },\r\n    { label: \"Sep\", value: 0 },\r\n    { label: \"Oct\", value: 0 },\r\n    { label: \"Nov\", value: 0 },\r\n    { label: \"Dec\", value: 0 },\r\n  ];\r\n\r\n  for (const expense of props.expenses) {\r\n    const expenseMonth = expense.date.getMonth(); // starting at 0 => January => 0\r\n    chartDataPoints[expenseMonth].value += expense.amount;\r\n  }\r\n\r\n  return <Chart dataPoints={chartDataPoints} />;\r\n};\r\n\r\nexport default ExpensesChart;\r\n","import React, { useState } from \"react\";\r\n\r\nimport Card from \"../card/card.component\";\r\nimport ExpensesList from \"../expenses-list/expenses-list.component\";\r\nimport ExpensesFilter from \"../expenses-filter/expenses-filter.component\";\r\n\r\nimport \"./expenses.styles.css\";\r\nimport ExpensesChart from \"../expense-chart/expense-chart.component\";\r\n\r\nconst Expenses = (props) => {\r\n  const [filteredYear, setFilteredYear] = useState(\"2021\");\r\n\r\n  const filterChangeHandler = (selectedYear) => {\r\n    setFilteredYear(selectedYear);\r\n  };\r\n\r\n  const filteredExpenses = props.expenses.filter((expense) => {\r\n    return expense.date.getFullYear().toString() === filteredYear;\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <Card className=\"expenses\">\r\n        <ExpensesFilter\r\n          selected={filteredYear}\r\n          onChangeFilter={filterChangeHandler}\r\n        />\r\n        <ExpensesChart expenses={filteredExpenses} />\r\n        <ExpensesList expenses={filteredExpenses} />\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Expenses;\r\n","import React, { useState } from \"react\";\n\nimport NewExpense from \"./components/new-expense/new-expense.component\";\nimport Expenses from \"./components/expenses/expenses.component\";\n\nconst INITIAL_EXPENSES = [\n  {\n    id: \"1\",\n    title: \"Toilet Paper\",\n    amount: 94.12,\n    date: new Date(2021, 7, 14),\n  },\n  {\n    id: \"2\",\n    title: \"Game Of Thrones\",\n    amount: 799.49,\n    date: new Date(2021, 5, 12),\n  },\n  {\n    id: \"3\",\n    title: \"Car Insurance\",\n    amount: 294.67,\n    date: new Date(2022, 6, 28),\n  },\n  {\n    id: \"4\",\n    title: \"New Desk (Wooden)\",\n    amount: 450,\n    date: new Date(2023, 8, 12),\n  },\n];\n\nconst App = () => {\n  const [expenses, setExpenses] = useState(INITIAL_EXPENSES);\n\n  const addExpenseHandler = (expense) => {\n    // setExpenses([expense, ...expenses]); or\n\n    setExpenses((prevExpense) => {\n      return [expense, ...prevExpense];\n    });\n  };\n\n  return (\n    <div>\n      <NewExpense onAddExpense={addExpenseHandler} />\n      <Expenses expenses={expenses} />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}